
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PlanoScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  slug: 'slug',
  descricao: 'descricao',
  profissionaisAtivos: 'profissionaisAtivos',
  usuarios: 'usuarios',
  agendamentosMes: 'agendamentosMes',
  pacientes: 'pacientes',
  armazenamentoMB: 'armazenamentoMB',
  whatsappAtivo: 'whatsappAtivo',
  googleCalendarSync: 'googleCalendarSync',
  valorMensal: 'valorMensal',
  valorAnual: 'valorAnual',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  planoId: 'planoId',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  nome: 'nome',
  email: 'email',
  senha: 'senha',
  tipo: 'tipo',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AutorizacaoScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  modulo: 'modulo',
  visualizar: 'visualizar',
  criarAlterar: 'criarAlterar',
  cancelar: 'cancelar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfissionalScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  nome: 'nome',
  especialidade: 'especialidade',
  cor: 'cor',
  observacoes: 'observacoes',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PacienteScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  profissionalId: 'profissionalId',
  nome: 'nome',
  cpf: 'cpf',
  dataNascimento: 'dataNascimento',
  telefone: 'telefone',
  telefone2: 'telefone2',
  email: 'email',
  cep: 'cep',
  logradouro: 'logradouro',
  numero: 'numero',
  complemento: 'complemento',
  bairro: 'bairro',
  cidade: 'cidade',
  estado: 'estado',
  alergias: 'alergias',
  menorIdade: 'menorIdade',
  responsavelNome: 'responsavelNome',
  responsavelCpf: 'responsavelCpf',
  responsavelTelefone: 'responsavelTelefone',
  responsavelParentesco: 'responsavelParentesco',
  observacoes: 'observacoes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcedimentoScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  nome: 'nome',
  valor: 'valor',
  duracaoMinutos: 'duracaoMinutos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgendamentoScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  pacienteId: 'pacienteId',
  profissionalId: 'profissionalId',
  procedimentoId: 'procedimentoId',
  dataHora: 'dataHora',
  dataHoraFim: 'dataHoraFim',
  status: 'status',
  observacoes: 'observacoes',
  confirmacaoEnviada: 'confirmacaoEnviada',
  recorrenciaId: 'recorrenciaId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AtendimentoScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  agendamentoId: 'agendamentoId',
  pacienteId: 'pacienteId',
  profissionalId: 'profissionalId',
  procedimentoId: 'procedimentoId',
  anotacoes: 'anotacoes',
  procedimentosRealizados: 'procedimentosRealizados',
  cancelado: 'cancelado',
  canceladoEm: 'canceladoEm',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppConfigScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  instanceName: 'instanceName',
  instanceToken: 'instanceToken',
  qrCode: 'qrCode',
  status: 'status',
  phoneNumber: 'phoneNumber',
  profileName: 'profileName',
  totalContacts: 'totalContacts',
  totalChats: 'totalChats',
  mensagensEnviadas: 'mensagensEnviadas',
  mensagensRecebidas: 'mensagensRecebidas',
  templateConfirmacao: 'templateConfirmacao',
  templateConfirmado: 'templateConfirmado',
  templateReagendar: 'templateReagendar',
  templateOpcaoInvalida: 'templateOpcaoInvalida',
  horasAntecedencia: 'horasAntecedencia',
  enviarLinkAnamnese: 'enviarLinkAnamnese',
  formularioId: 'formularioId',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppMensagemScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  configId: 'configId',
  agendamentoId: 'agendamentoId',
  pacienteId: 'pacienteId',
  telefone: 'telefone',
  mensagem: 'mensagem',
  tipo: 'tipo',
  status: 'status',
  respostaRecebida: 'respostaRecebida',
  respostaEm: 'respostaEm',
  tentativas: 'tentativas',
  erroMensagem: 'erroMensagem',
  enviadaEm: 'enviadaEm',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormularioScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  profissionalId: 'profissionalId',
  nome: 'nome',
  descricao: 'descricao',
  campos: 'campos',
  ativo: 'ativo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnamneseScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  pacienteId: 'pacienteId',
  formularioId: 'formularioId',
  atendimentoId: 'atendimentoId',
  respostas: 'respostas',
  observacoes: 'observacoes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LogSistemaScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  usuarioId: 'usuarioId',
  tipo: 'tipo',
  descricao: 'descricao',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TipoUsuario = exports.$Enums.TipoUsuario = {
  ADMIN: 'ADMIN',
  SECRETARIA: 'SECRETARIA'
};

exports.Modulo = exports.$Enums.Modulo = {
  PACIENTES: 'PACIENTES',
  PROFISSIONAIS: 'PROFISSIONAIS',
  PROCEDIMENTOS: 'PROCEDIMENTOS',
  AGENDA: 'AGENDA',
  ATENDIMENTOS: 'ATENDIMENTOS',
  WHATSAPP: 'WHATSAPP',
  USUARIOS: 'USUARIOS',
  RELATORIOS: 'RELATORIOS'
};

exports.StatusAgendamento = exports.$Enums.StatusAgendamento = {
  MARCADO: 'MARCADO',
  CONFIRMADO: 'CONFIRMADO',
  COMPARECEU: 'COMPARECEU',
  FALTOU: 'FALTOU',
  CANCELADO: 'CANCELADO'
};

exports.TipoLog = exports.$Enums.TipoLog = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  AGENDAMENTO_CRIADO: 'AGENDAMENTO_CRIADO',
  AGENDAMENTO_ATUALIZADO: 'AGENDAMENTO_ATUALIZADO',
  AGENDAMENTO_CANCELADO: 'AGENDAMENTO_CANCELADO',
  CONFIRMACAO_ENVIADA: 'CONFIRMACAO_ENVIADA',
  CONFIRMACAO_RECEBIDA: 'CONFIRMACAO_RECEBIDA',
  SYNC_GOOGLE_CALENDAR: 'SYNC_GOOGLE_CALENDAR',
  ERROR: 'ERROR',
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE'
};

exports.Prisma.ModelName = {
  Plano: 'Plano',
  Tenant: 'Tenant',
  Usuario: 'Usuario',
  Autorizacao: 'Autorizacao',
  Profissional: 'Profissional',
  Paciente: 'Paciente',
  Procedimento: 'Procedimento',
  Agendamento: 'Agendamento',
  Atendimento: 'Atendimento',
  WhatsAppConfig: 'WhatsAppConfig',
  WhatsAppMensagem: 'WhatsAppMensagem',
  Formulario: 'Formulario',
  Anamnese: 'Anamnese',
  LogSistema: 'LogSistema'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
