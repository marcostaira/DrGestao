// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum TipoUsuario {
  ADMIN
  SECRETARIA
}

enum StatusAgendamento {
  MARCADO
  CONFIRMADO
  COMPARECEU
  FALTOU
  CANCELADO
  REAGENDAR
}

enum StatusAtendimento {
  AVULSO
  AVALIACAO
  PLANO_TRATAMENTO
}

enum StatusAprovacao {
  PENDENTE
  APROVADO
  REPROVADO
}

enum ProgressoProcedimento {
  NAO_INICIADO
  EM_ANDAMENTO
  CONCLUIDO
}

enum TipoLog {
  LOGIN
  LOGOUT
  AGENDAMENTO_CRIADO
  AGENDAMENTO_ATUALIZADO
  AGENDAMENTO_CANCELADO
  CONFIRMACAO_ENVIADA
  CONFIRMACAO_RECEBIDA
  SYNC_GOOGLE_CALENDAR
  ERROR
  CREATE
  UPDATE
  DELETE
}

enum Modulo {
  PACIENTES
  PROFISSIONAIS
  PROCEDIMENTOS
  AGENDA
  ATENDIMENTOS
  WHATSAPP
  USUARIOS
  RELATORIOS
}

// ============================================================================
// PLANOS E TENANTS
// ============================================================================

model Plano {
  id        String   @id @default(cuid())
  nome      String   @unique
  slug      String   @unique
  descricao String?
  
  // Limites
  profissionaisAtivos Int  @map("profissionais_ativos")
  usuarios            Int
  agendamentosMes     Int  @map("agendamentos_mes")
  pacientes           Int
  armazenamentoMB     Int  @map("armazenamento_mb")
  
  // Funcionalidades
  whatsappAtivo       Boolean @default(false) @map("whatsapp_ativo")
  googleCalendarSync  Boolean @default(false) @map("google_calendar_sync")
  
  // Preço
  valorMensal         Decimal? @db.Decimal(10, 2) @map("valor_mensal")
  valorAnual          Decimal? @db.Decimal(10, 2) @map("valor_anual")
  
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  tenants   Tenant[]

  @@map("planos")
}

model Tenant {
  id             String          @id @default(cuid())
  nome           String
  planoId        String          @map("plano_id")
  ativo          Boolean         @default(true)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  
  plano                     Plano                      @relation(fields: [planoId], references: [id])
  agendamentos              Agendamento[]
  atendimentos              Atendimento[]
  atendimentoProcedimentos  AtendimentoProcedimento[]
  pacientes                 Paciente[]
  procedimentos             Procedimento[]
  profissionais             Profissional[]
  usuarios                  Usuario[]
  whatsappConfig            WhatsAppConfig?
  formularios               Formulario[]
  anamneses                 Anamnese[]
  whatsappMensagens         WhatsAppMensagem[]

  @@index([planoId])
  @@map("tenants")
  LinkAprovacaoAvaliacao LinkAprovacaoAvaliacao[]
}

// ============================================================================
// USUÁRIOS E AUTORIZAÇÕES
// ============================================================================

model Usuario {
  id        String      @id @default(cuid())
  tenantId  String      @map("tenant_id")
  nome      String
  email     String
  senha     String
  tipo      TipoUsuario @default(SECRETARIA)
  ativo     Boolean     @default(true)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  autorizacoes Autorizacao[]

  @@unique([tenantId, email])
  @@index([tenantId, email])
  @@map("usuarios")
}

model Autorizacao {
  id        String   @id @default(cuid())
  usuarioId String   @map("usuario_id")
  modulo    Modulo
  
  // Permissões específicas
  visualizar     Boolean @default(false)
  criarAlterar   Boolean @default(false) @map("criar_alterar")
  cancelar       Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, modulo])
  @@index([usuarioId])
  @@map("autorizacoes")
}

// ============================================================================
// PROFISSIONAIS
// ============================================================================

model Profissional {
  id            String   @id @default(uuid())
  tenantId      String   @map("tenant_id")
  nome          String
  especialidade String?
  cor           String   @default("#3B82F6")
  observacoes   String?
  ativo         Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pacientes    Paciente[]
  agendamentos Agendamento[]
  atendimentos Atendimento[]
  formularios  Formulario[]

  @@index([tenantId, ativo])
  @@map("profissionais")
}

// ============================================================================
// PACIENTES
// ============================================================================

model Paciente {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  profissionalId String?  @map("profissional_id")
  
  // Dados pessoais
  nome           String
  cpf            String?
  dataNascimento DateTime? @map("data_nascimento")
  
  // Contatos
  telefone  String
  telefone2 String? @map("telefone2")
  email     String?
  
  // Endereço
  cep         String?
  logradouro  String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String? @db.VarChar(2)
  
  // Dados médicos
  alergias String? @db.Text
  
  // Responsável (para menores de idade)
  menorIdade            Boolean @default(false) @map("menor_idade")
  responsavelNome       String? @map("responsavel_nome")
  responsavelCpf        String? @map("responsavel_cpf")
  responsavelTelefone   String? @map("responsavel_telefone")
  responsavelParentesco String? @map("responsavel_parentesco")
  
  observacoes String? @db.Text
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  profissional      Profissional?      @relation(fields: [profissionalId], references: [id], onDelete: SetNull)
  agendamentos      Agendamento[]
  atendimentos      Atendimento[]
  anamneses         Anamnese[]
  whatsappMensagens WhatsAppMensagem[]
  linksAnamnese     LinkAnamnese[]

  @@index([tenantId])
  @@index([tenantId, nome])
  @@index([tenantId, telefone])
  @@index([cpf])
  @@map("pacientes")
}

// ============================================================================
// PROCEDIMENTOS
// ============================================================================

model Procedimento {
  id             String        @id @default(cuid())
  tenantId       String        @map("tenant_id")
  nome           String
  valor          Decimal?      @db.Decimal(10, 2)
  temStatus      Boolean       @default(false) @map("tem_status") 
  duracaoMinutos Int           @map("duracao_minutos")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  
  agendamentos              Agendamento[]
  atendimentos              Atendimento[]
  atendimentoProcedimentos  AtendimentoProcedimento[]
  tenant                    Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, nome])
  @@map("procedimentos")
}

// ============================================================================
// AGENDAMENTOS
// ============================================================================

model Agendamento {
  id                 String            @id @default(cuid())
  tenantId           String            @map("tenant_id")
  pacienteId         String?           @map("paciente_id")
  profissionalId     String            @map("profissional_id")
  procedimentoId     String            @map("procedimento_id")
  dataHora           DateTime          @map("data_hora")
  dataHoraFim        DateTime          @map("data_hora_fim")
  status             StatusAgendamento @default(MARCADO)
  observacoes        String?
  confirmacaoEnviada Boolean           @default(false) @map("confirmacao_enviada")
  recorrenciaId      String?           @map("recorrencia_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  paciente                  Paciente?                  @relation(fields: [pacienteId], references: [id])
  procedimento              Procedimento               @relation(fields: [procedimentoId], references: [id], onDelete: Cascade)
  profissional              Profissional               @relation(fields: [profissionalId], references: [id], onDelete: Cascade)
  tenant                    Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  atendimento               Atendimento?
  whatsappMensagens         WhatsAppMensagem[]
  linksAnamnese             LinkAnamnese[]
  atendimentoProcedimentos  AtendimentoProcedimento[]

  @@index([tenantId, dataHora])
  @@index([tenantId, profissionalId])
  @@index([tenantId, pacienteId])
  @@map("agendamentos")
}

// ============================================================================
// ATENDIMENTOS
// ============================================================================

model Atendimento {
  id                      String             @id @default(uuid())
  tenantId                String             @map("tenant_id")
  agendamentoId           String             @unique @map("agendamento_id")
  pacienteId              String             @map("paciente_id")
  profissionalId          String             @map("profissional_id")
  procedimentoId          String?            @map("procedimento_id")
  
  // Tipo e Status
  tipo                    StatusAtendimento  @default(AVULSO)
  statusAprovacao         StatusAprovacao?   @default(PENDENTE) @map("status_aprovacao")
  
  // Anotações
  anotacoes               String?            @db.Text
  procedimentosRealizados Json               @default("[]") @map("procedimentos_realizados")
  
  // Aprovação/Reprovação
  aprovadoEm              DateTime?          @map("aprovado_em")
  aprovadoPor             String?            @map("aprovado_por")
  reprovadoEm             DateTime?          @map("reprovado_em")
  reprovadoMotivo         String?            @map("reprovado_motivo")
  
  // Relacionamento entre Avaliação e Plano
  avaliacaoId             String?            @map("avaliacao_id")
  planoTratamentoId       String?            @map("plano_tratamento_id")
  
  // Cancelamento
  cancelado               Boolean            @default(false)
  canceladoEm             DateTime?          @map("cancelado_em")
  
  createdAt               DateTime           @default(now()) @map("created_at")
  updatedAt               DateTime           @updatedAt @map("updated_at")

  // Relações
  tenant              Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  agendamento         Agendamento               @relation(fields: [agendamentoId], references: [id], onDelete: Cascade)
  paciente            Paciente                  @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  profissional        Profissional              @relation(fields: [profissionalId], references: [id], onDelete: Cascade)
  procedimento        Procedimento?             @relation(fields: [procedimentoId], references: [id], onDelete: SetNull)
  anamneses           Anamnese[]
  
  // Auto-relacionamento
  avaliacao           Atendimento?              @relation("AvaliacaoPlano", fields: [avaliacaoId], references: [id], onDelete: SetNull)
  planosGerados       Atendimento[]             @relation("AvaliacaoPlano")
  
  // Procedimentos do plano/avaliação
  procedimentosPlano  AtendimentoProcedimento[]

  @@index([tenantId])
  @@index([tenantId, pacienteId])
  @@index([tenantId, profissionalId])
  @@index([tenantId, agendamentoId])
  @@index([tenantId, cancelado])
  @@index([tipo])
  @@index([statusAprovacao])
  @@index([avaliacaoId])
  @@index([planoTratamentoId])
  @@map("atendimentos")
  LinkAprovacaoAvaliacao LinkAprovacaoAvaliacao[]
}

// ============================================================================
// PROCEDIMENTOS DO PLANO/AVALIAÇÃO
// ============================================================================

model AtendimentoProcedimento {
  id              String                 @id @default(cuid())
  tenantId        String                 @map("tenant_id")
  atendimentoId   String                 @map("atendimento_id")
  procedimentoId  String                 @map("procedimento_id")
  ordem           Int                    @default(1)
  progresso       ProgressoProcedimento  @default(NAO_INICIADO)
  percentualProgresso Int?               @map("percentual_progresso")
  agendamentoId   String?                @map("agendamento_id")
  observacoes     String?                @db.Text
  valorPraticado  Decimal?               @db.Decimal(10, 2) @map("valor_praticado")
  concluidoEm     DateTime?              @map("concluido_em")
  
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")

  // Relações
  tenant          Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  atendimento     Atendimento            @relation(fields: [atendimentoId], references: [id], onDelete: Cascade)
  procedimento    Procedimento           @relation(fields: [procedimentoId], references: [id], onDelete: Restrict)
  agendamento     Agendamento?           @relation(fields: [agendamentoId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([atendimentoId])
  @@index([procedimentoId])
  @@index([agendamentoId])
  @@index([progresso])
  @@map("atendimento_procedimentos")
}

// ============================================================================
// WHATSAPP
// ============================================================================

model WhatsAppConfig {
  id                      String   @id @default(cuid())
  tenantId                String   @unique @map("tenant_id")
  
  // Configurações de conexão
  instanceName            String?  @map("instance_name")
  instanceToken           String?  @map("instance_token")
  qrCode                  String?  @db.Text @map("qr_code")
  status                  String   @default("DISCONNECTED")
  phoneNumber             String?  @map("phone_number")
  profileName             String?  @map("profile_name")
  
  // Estatísticas
  totalContacts           Int      @default(0) @map("total_contacts")
  totalChats              Int      @default(0) @map("total_chats")
  mensagensEnviadas       Int      @default(0) @map("mensagens_enviadas")
  mensagensRecebidas      Int      @default(0) @map("mensagens_recebidas")
  
  // Templates
  templateConfirmacao     String   @db.Text @map("template_confirmacao") @default("Olá {nome}! Você tem consulta marcada para {data} às {hora} com {profissional}. Para confirmar, responda: 1=SIM ou 2=REAGENDAR")
  templateConfirmado      String   @db.Text @map("template_confirmado") @default("✅ Consulta confirmada! Nos vemos em {data} às {hora}.")
  templateReagendar       String   @db.Text @map("template_reagendar") @default("📅 Vamos reagendar sua consulta. Em breve entraremos em contato.")
  templateOpcaoInvalida   String   @db.Text @map("template_opcao_invalida") @default("❌ Resposta não reconhecida. Digite:\n1 - Para confirmar\n2 - Para reagendar")
  
  // Configurações de envio
  horasAntecedencia       Int      @default(24) @map("horas_antecedencia")
  enviarLinkAnamnese      Boolean  @default(false) @map("enviar_link_anamnese")
  formularioId            String?  @map("formulario_id")
  
  ativo                   Boolean  @default(false)
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  tenant     Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  formulario Formulario?        @relation(fields: [formularioId], references: [id])
  mensagens  WhatsAppMensagem[]
  
  @@index([tenantId])
  @@index([status])
  @@map("whatsapp_config")
}

model WhatsAppMensagem {
  id                String   @id @default(cuid())
  tenantId          String   @map("tenant_id")
  configId          String   @map("config_id")
  agendamentoId     String?  @map("agendamento_id")
  pacienteId        String   @map("paciente_id")
  
  telefone          String
  mensagem          String   @db.Text
  tipo              String
  status            String   @default("PENDENTE")
  
  respostaRecebida  String?  @db.Text @map("resposta_recebida")
  respostaEm        DateTime? @map("resposta_em")
  
  tentativas        Int      @default(0)
  erroMensagem      String?  @db.Text @map("erro_mensagem")
  
  enviadaEm         DateTime? @map("enviada_em")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  config      WhatsAppConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  agendamento Agendamento?   @relation(fields: [agendamentoId], references: [id], onDelete: SetNull)
  paciente    Paciente       @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([configId])
  @@index([agendamentoId])
  @@index([pacienteId])
  @@index([status])
  @@index([telefone])
  @@index([enviadaEm])
  @@map("whatsapp_mensagens")
}

// ============================================================================
// ANAMNESE E FORMULÁRIOS
// ============================================================================

model Formulario {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  profissionalId String?  @map("profissional_id")
  
  nome           String
  descricao      String?  @db.Text
  campos         Json
  ativo          Boolean  @default(true)
  
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  profissional    Profissional?    @relation(fields: [profissionalId], references: [id], onDelete: SetNull)
  anamneses       Anamnese[]
  whatsappConfigs WhatsAppConfig[]
  linksAnamnese   LinkAnamnese[]

  @@index([tenantId])
  @@index([tenantId, profissionalId])
  @@index([tenantId, ativo])
  @@map("formularios")
}

model Anamnese {
  id             String   @id @default(cuid())
  tenantId       String   @map("tenant_id")
  pacienteId     String   @map("paciente_id")
  formularioId   String   @map("formulario_id")
  atendimentoId  String?  @map("atendimento_id")
  
  respostas      Json
  observacoes    String?  @db.Text
  
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  paciente      Paciente      @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  formulario    Formulario    @relation(fields: [formularioId], references: [id], onDelete: Restrict)
  atendimento   Atendimento?  @relation(fields: [atendimentoId], references: [id], onDelete: SetNull)
  linksAnamnese LinkAnamnese[]
  
  @@index([tenantId, pacienteId])
  @@index([tenantId, formularioId])
  @@index([tenantId, atendimentoId])
  @@map("anamneses")
}

model LinkAnamnese {
  id             String    @id @default(cuid())
  tenantId       String    @map("tenant_id")
  pacienteId     String    @map("paciente_id")
  formularioId   String    @map("formulario_id")
  agendamentoId  String?   @map("agendamento_id")
  
  token          String    @unique
  preenchido     Boolean   @default(false)
  expiresAt      DateTime  @map("expires_at")
  preenchidoEm   DateTime? @map("preenchido_em")
  anamneseId     String?   @unique @map("anamnese_id")
  
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  paciente     Paciente     @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  formulario   Formulario   @relation(fields: [formularioId], references: [id], onDelete: Cascade)
  agendamento  Agendamento? @relation(fields: [agendamentoId], references: [id], onDelete: SetNull)
  anamnese     Anamnese?    @relation(fields: [anamneseId], references: [id], onDelete: SetNull)

  @@index([token])
  @@index([tenantId])
  @@index([pacienteId])
  @@map("links_anamnese")
}

// ============================================================================
// LOGS DO SISTEMA
// ============================================================================

model LogSistema {
  id        String   @id @default(cuid())
  tenantId  String   @map("tenant_id")
  usuarioId String?  @map("usuario_id")
  tipo      TipoLog
  descricao String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([tenantId, tipo])
  @@index([tenantId, createdAt])
  @@map("logs_sistema")
}

model LinkAprovacaoAvaliacao {
  id           String      @id @default(cuid())
  tenantId     String
  avaliacaoId  String
  token        String      @unique
  expiresAt    DateTime
  utilizado    Boolean     @default(false)
  utilizadoEm  DateTime?
  createdAt    DateTime    @default(now())
  enviadoWhatsApp Boolean   @default(false)
  enviadoEm       DateTime?

  tenant       Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  avaliacao    Atendimento @relation(fields: [avaliacaoId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([avaliacaoId])
  @@index([token])
  @@index([expiresAt])
  @@map("links_aprovacao_avaliacao")
}