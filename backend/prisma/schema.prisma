generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String          @id @default(cuid())
  nome           String
  plano          String          @default("basico")
  ativo          Boolean         @default(true)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  agendamentos   Agendamento[]
  atendimentos   Atendimento[]
  pacientes      Paciente[]
  procedimentos  Procedimento[]
  profissionais  Profissional[]
  usuarios       Usuario[]
  whatsappConfig WhatsAppConfig?

  @@map("tenants")
}

model Usuario {
  id        String      @id @default(cuid())
  tenantId  String      @map("tenant_id")
  nome      String
  email     String
  senha     String
  tipo      TipoUsuario @default(SECRETARIA)
  ativo     Boolean     @default(true)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@index([tenantId, email])
  @@map("usuarios")
}

model Profissional {
  id            String        @id @default(cuid())
  tenantId      String        @map("tenant_id")
  nome          String
  especialidade String?
  observacoes   String?
  ativo         Boolean       @default(true)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  agendamentos  Agendamento[]
  atendimentos  Atendimento[]
  pacientes     Paciente[]
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, ativo])
  @@map("profissionais")
}

model Paciente {
  id             String        @id @default(cuid())
  tenantId       String        @map("tenant_id")
  profissionalId String?       @map("profissional_id")
  nome           String
  telefone       String
  email          String?
  observacoes    String?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  agendamentos   Agendamento[]
  atendimentos   Atendimento[]
  profissional   Profissional? @relation(fields: [profissionalId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, nome])
  @@index([tenantId, telefone])
  @@map("pacientes")
}

model Procedimento {
  id             String        @id @default(cuid())
  tenantId       String        @map("tenant_id")
  nome           String
  valor          Decimal?      @db.Decimal(10, 2)
  duracaoMinutos Int           @map("duracao_minutos")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  agendamentos   Agendamento[]
  atendimentos   Atendimento[]
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, nome])
  @@map("procedimentos")
}

model Agendamento {
  id                 String            @id @default(cuid())
  tenantId           String            @map("tenant_id")
  pacienteId         String?           @map("paciente_id")
  profissionalId     String            @map("profissional_id")
  procedimentoId     String            @map("procedimento_id")
  dataHora           DateTime          @map("data_hora")
  status             StatusAgendamento @default(MARCADO)
  observacoes        String?
  confirmacaoEnviada Boolean           @default(false) @map("confirmacao_enviada")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  dataHoraFim        DateTime          @map("data_hora_fim")
  paciente           Paciente?         @relation(fields: [pacienteId], references: [id])
  procedimento       Procedimento      @relation(fields: [procedimentoId], references: [id], onDelete: Cascade)
  profissional       Profissional      @relation(fields: [profissionalId], references: [id], onDelete: Cascade)
  tenant             Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  atendimento        Atendimento?

  @@index([tenantId, dataHora])
  @@index([tenantId, profissionalId])
  @@index([tenantId, pacienteId])
  @@map("agendamentos")
}

model Atendimento {
  id                      String       @id @default(cuid())
  tenantId                String       @map("tenant_id")
  agendamentoId           String       @unique @map("agendamento_id")
  pacienteId              String       @map("paciente_id")
  profissionalId          String       @map("profissional_id")
  procedimentoId          String       @map("procedimento_id")
  anotacoes               String?
  procedimentosRealizados Json?        @map("procedimentos_realizados")
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")
  agendamento             Agendamento  @relation(fields: [agendamentoId], references: [id], onDelete: Cascade)
  paciente                Paciente     @relation(fields: [pacienteId], references: [id], onDelete: Cascade)
  procedimento            Procedimento @relation(fields: [procedimentoId], references: [id], onDelete: Cascade)
  profissional            Profissional @relation(fields: [profissionalId], references: [id], onDelete: Cascade)
  tenant                  Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, pacienteId])
  @@index([tenantId, profissionalId])
  @@map("atendimentos")
}

model WhatsAppConfig {
  id                      String   @id @default(cuid())
  tenantId                String   @unique @map("tenant_id")
  templateConfirmacao     String   @default("Olá {nome}! Você tem consulta marcada para {data} às {hora}. Para confirmar, responda: 1=SIM ou 2=NÃO") @map("template_confirmacao")
  templateSim             String   @default("Consulta confirmada! Nos vemos em {data} às {hora}.") @map("template_sim")
  templateNao             String   @default("Consulta cancelada. Entre em contato para reagendar.") @map("template_nao")
  templateOpcoesInvalidas String   @default("Resposta não reconhecida. Digite 1 para SIM ou 2 para NÃO.") @map("template_opcoes_invalidas")
  horasAntecedencia       Int      @default(24) @map("horas_antecedencia")
  ativo                   Boolean  @default(true)
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  tenant                  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("whatsapp_config")
}

model LogSistema {
  id        String   @id @default(cuid())
  tenantId  String   @map("tenant_id")
  usuarioId String?  @map("usuario_id")
  tipo      TipoLog
  descricao String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([tenantId, tipo])
  @@index([tenantId, createdAt])
  @@map("logs_sistema")
}

enum TipoUsuario {
  ADMIN
  SECRETARIA
}

enum StatusAgendamento {
  MARCADO
  CONFIRMADO
  COMPARECEU
  FALTOU
  CANCELADO
}

enum TipoLog {
  LOGIN
  LOGOUT
  AGENDAMENTO_CRIADO
  AGENDAMENTO_ATUALIZADO
  AGENDAMENTO_CANCELADO
  CONFIRMACAO_ENVIADA
  CONFIRMACAO_RECEBIDA
  SYNC_GOOGLE_CALENDAR
  ERROR
  CREATE
  UPDATE
  DELETE
}
